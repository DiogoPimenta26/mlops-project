# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://docs.kedro.org/en/stable/data/data_catalog.html
#
# We support interacting with a variety of data stores including local file systems, cloud, network and HDFS
#
# An example data set definition can look as follows:
#
#bikes:
#  type: pandas.CSVDataset
#  filepath: "data/01_raw/bikes.csv"
#
#weather:
#  type: spark.SparkDataset
#  filepath: s3a://your_bucket/data/01_raw/weather*
#  file_format: csv
#  credentials: dev_s3
#  load_args:
#    header: True
#    inferSchema: True
#  save_args:
#    sep: '|'
#    header: True
#
#scooters:
#  type: pandas.SQLTableDataset
#  credentials: scooters_credentials
#  table_name: scooters
#  load_args:
#    index_col: ['name']
#    columns: ['name', 'gear']
#  save_args:
#    if_exists: 'replace'
#    # if_exists: 'fail'
#    # if_exists: 'append'
#
# The Data Catalog supports being able to reference the same file using two different Dataset implementations
# (transcoding), templating and a way to reuse arguments that are frequently repeated. See more here:
# https://docs.kedro.org/en/stable/data/data_catalog.html



heart_data_raw:
  type: pandas.CSVDataset
  filepath: data/01_raw/heart_statlog_cleveland_hungary_final.csv

output_dataframe_after_duplicates_removal:
  type: pandas.CSVDataset
  filepath: data/02_intermediate/output_dataframe_after_duplicates_removal.csv

output_dataframe_after_zero_bp_removal:
  type: pandas.CSVDataset
  filepath: data/02_intermediate/output_dataframe_after_zero_bp_removal.csv

output_dataframe_after_zero_cholesterol_removal:
  type: pandas.CSVDataset
  filepath: data/02_intermediate/output_dataframe_after_zero_cholesterol_removal.csv

output_dataframe_after_max_hr_outliers_removal:
  type: pandas.CSVDataset
  filepath: data/02_intermediate/output_dataframe_after_max_hr_outliers_removal.csv

output_dataframe_after_age_binning:
  type: pandas.CSVDataset
  filepath: data/02_intermediate/output_dataframe_after_age_binning.csv

preprocessed_data:
  type: pandas.CSVDataset
  filepath: data/03_primary/preprocessed_data.csv

features:
  type: pandas.CSVDataset
  filepath: data/04_feature/features.csv

aligned_features:
  type: pandas.CSVDataset
  filepath: data/04_feature/aligned_features.csv

X_train:
  type: pandas.CSVDataset
  filepath: data/05_model_input/X_train.csv
 

X_test:
  type: pandas.CSVDataset
  filepath: data/05_model_input/X_test.csv
  

y_train:
  type: pandas.CSVDataset
  filepath: data/05_model_input/y_train.csv


y_test:
  type: pandas.CSVDataset
  filepath: data/05_model_input/y_test.csv
  
selected_features:
  type: pandas.CSVDataset
  filepath: data/04_feature/selected_features.csv
  save_args:
    index: False